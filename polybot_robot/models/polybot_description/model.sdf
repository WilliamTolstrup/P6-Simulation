<?xml version='1.0'?>
<sdf version='1.4'>
  <model name="polybot">
  <static>false</static>
  
  <!-- *********************** MAIN BODY **************************  -->
  
  <link name='base_link'>
    <pose>0 0 0.0 0 0 0</pose>
    <collision name='base_link_collision'>
      <geometry>
        <box>
          <size>0.5 0.3 0.1</size>
        </box>
      </geometry>
    </collision>
    
    <visual name='base_link_visual'>
      <geometry>
        <box>
          <size>0.5 0.3 0.1</size>
        </box>
      </geometry>
    </visual>
    
    <!-- *********************** CASTER WHEEL **************************  -->
    
    <collision name='caster_collision'>
      <pose>0.165 0 -0.07 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>0.075</radius>
          </sphere>
        </geometry>

        <surface>
          <friction>
            <ode>
              <mu>0</mu>
              <mu2>0</mu2>
              <slip1>1.0</slip1>
              <slip2>1.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>

      <visual name='caster_visual'>
        <pose>0.165 0 -0.07 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>0.075</radius>
          </sphere>
        </geometry>
      </visual>
      
  </link>
  
  <!-- *********************** WHEEL LEFT **************************  -->
  
  <link name='wheel_left'>
    <pose>-0.08 -0.18 0 0 1.5707 1.5707</pose> <!-- -0.08 -0.18 0.255 0 1.5707 1.5707 -->
    <collision name='collision'>
      <geometry>
        <cylinder>
          <radius>0.1</radius>
          <length>0.02</length>
        </cylinder>
      </geometry>
    </collision>
    
    <visual name='visual'>
      <geometry>
        <cylinder>
          <radius>0.1</radius>
          <length>0.02</length>
        </cylinder>
      </geometry>
    </visual>
  </link>
  
  <!-- *********************** WHEEL RIGHT **************************  -->
  
  <link name='wheel_right'>
    <pose>-0.08 0.18 0.255 0 1.5707 1.5707</pose>
    <collision name='collision'>
      <geometry>
        <cylinder>
          <radius>0.1</radius>
          <length>0.02</length>
        </cylinder>
      </geometry>
    </collision>
    
    <visual name='visual'>
      <geometry>
        <cylinder>
          <radius>0.1</radius>
          <length>0.02</length>
        </cylinder>
      </geometry>
    </visual>
  </link>
  
  <!-- *********************** JOINT LEFT **************************  -->
  
  <joint type="revolute" name="left_wheel_hinge">
    <pose>0 0 0 0 0 0</pose>
    <child>wheel_left</child>
    <parent>base_link</parent>
    <axis>
      <xyz>0 1 0</xyz>
    </axis>
  </joint>
  
  <!-- *********************** JOINT RIGHT **************************  -->
  
  <joint type='revolute' name='right_wheel_hinge'>
    <pose>0 0 0 0 0 0</pose>
    <child>wheel_right</child>
    <parent>base_link</parent>
    <axis>
      <xyz>0 1 0</xyz>
    </axis>
  </joint>
    
  <!-- *********************** IMU SENSOR SETUP **************************  -->
  
  <link name="imu_link">
    <gravity>true</gravity>
    <sensor name="bmb_imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <orientation>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </z>
        </orientation>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="polybot_imu" filename="libgazebo_ros_imu_sensor.so">
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <frame_name>imu_link</frame_name>
        <ros>
          <namespace>/imu</namespace>
          <remapping>~/out:=data</remapping>
        </ros>
      </plugin>
    </sensor>
  </link>

  <!-- *********************** GPS SETUP *********************************  -->
  
  <link name="gps_link">
    <sensor name="bmb_gps" type="gps">
      <always_on>true</always_on>
      <update_rate>10.0</update_rate>
      <gps>
        <position_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1e-2</stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1</stddev>
            </noise>
          </vertical>
        </position_sensing>
      </gps>
      <plugin name="polybot_gps" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <remapping>~/out:=gps/fix</remapping>
        </ros>
      </plugin>
    </sensor>
  </link>
  
  
  <!-- *********************** LIDAR SETUP *********************************  -->
  
  <link name="lidar_link">    
  <inertial>
    <pose>0.215 0 0.13 0 0 0</pose>
    <inertia>
      <ixx>0.001</ixx>
      <ixy>0.000</ixy>
      <ixz>0.000</ixz>
      <iyy>0.001</iyy>
      <iyz>0.000</iyz>
      <izz>0.001</izz>
    </inertia>
    <mass>0.114</mass>
  </inertial>
 
  <collision name="lidar_collision">
    <pose>0.215 0 0.13 0 0 0</pose>
    <geometry>
      <cylinder>
        <radius>0.0508</radius>
        <length>0.18</length>
      </cylinder>
    </geometry>
  </collision>
 
  <visual name="lidar_visual">
    <pose>0.215 0 0.13 0 0 0</pose>
    <geometry>
      <cylinder>
        <radius>0.0508</radius>
        <length>0.18</length>
      </cylinder>
    </geometry>
    <material>
      <ambient>0.0 0.0 0.0 1.0</ambient>
      <diffuse>0.0 0.0 0.0 1.0</diffuse>
      <specular>0.0 0.0 0.0 1.0</specular>
      <emissive>0.0 0.0 0.0 1.0</emissive>
    </material>
  </visual>
 
  <sensor name="lidar" type="ray">
    <pose>0.215 0 0.215 0 0 0</pose>
    <always_on>true</always_on>
    <visualize>true</visualize>
    <update_rate>5</update_rate>
    <ray>
      <scan>
        <horizontal>
          <samples>360</samples>
          <resolution>1.00000</resolution>
          <min_angle>0.000000</min_angle>
          <max_angle>6.280000</max_angle>
        </horizontal>
      </scan>
      <range>
        <min>0.120000</min>
        <max>3.5</max>
        <resolution>0.015000</resolution>
      </range>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
      <ros>
        <remapping>~/out:=scan</remapping>
      </ros>
      <output_type>sensor_msgs/LaserScan</output_type>
      <frame_name>lidar_link</frame_name>
    </plugin>
  </sensor>
  </link>
  
  <!-- *********************** WHEEL ODOMETRY ***************************    -->
  
  <plugin name="polybot_diff_drive" filename="libgazebo_ros_diff_drive.so">

    <update_rate>30</update_rate>

    <!-- wheels -->
    <left_joint>left_wheel_hinge</left_joint>
    <right_joint>right_wheel_hinge</right_joint>

    <!-- kinematics -->
    <wheel_separation>0.52</wheel_separation>
    <wheel_diameter>0.28</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>20</max_wheel_torque>
    <max_wheel_acceleration>1.0</max_wheel_acceleration>

    <!-- Receive velocity commands on this ROS topic -->
    <command_topic>cmd_vel</command_topic>

    <!-- output -->
    <!-- When false, publish no wheel odometry data to a ROS topic -->
    <publish_odom>true</publish_odom>

    <!-- When true, publish coordinate transform from odom to base_footprint -->
    <!-- I usually use the robot_localization package to publish this transform -->   
    <publish_odom_tf>false</publish_odom_tf>
    
    <!-- When true, publish coordinate transform from base_link to the wheels -->
    <!-- The robot_state_publisher package is often used to publish this transform -->   
    <publish_wheel_tf>false</publish_wheel_tf>

    <odometry_topic>odom</odometry_topic>
    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_footprint</robot_base_frame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometry_source>0</odometry_source>

    <!-- Change the ROS topic we will publish the odometry data to -->
    <ros>
      <remapping>odom:=wheel/odometry</remapping>
    </ros>

  </plugin>
  
  <!-- *********************** JOINT STATE PUBLISHER *********************   -->
  
  <plugin name="polybot_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
    <ros>
      <remapping>~/out:=joint_states</remapping>
    </ros>
    <update_rate>30</update_rate>
    <joint_name>left_wheel_hinge</joint_name>
    <joint_name>right_wheel_hinge</joint_name>
  </plugin>  
  </model>
</sdf>
